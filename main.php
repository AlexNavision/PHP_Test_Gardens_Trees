<?php
/*
  –®–∞–±–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä. 11.01.2023. –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ PHP –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –ö–æ–º–ø–∞–Ω–∏—è –û–±–æ—Ä–æ—Ç.—Ä—É
  –í–µ—Ä—Å–∏–∏ PHP: 8.1, 8.2
*/

/*
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

  enum TreeType: —Ç–∏–ø—ã –¥–µ—Ä–µ–≤—å–µ–≤, –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å 1 –¥–µ—Ä–µ–≤–∞
  class Tree: –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ä–µ–≤—å–µ–≤
  class AppleTree, PearTree: –∫–ª–∞—Å—Å—ã –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –æ—Ç Tree
  class Garden: –°–∞–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å—Ç—É—Ç –¥–µ—Ä–µ–≤—å—è
  class App: —Å—Ç–∞—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ Main()
  class UnitTests: —Ç–µ—Å—Ç—ã

üî• –í—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ - –≤–Ω–∏–∑—É –ø—Ä–æ–≥—Ä–∞–º–º—ã.
   –í—Å–µ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ—Ç —Ö–æ—Ä–æ—à–∏–π –ø–ª–µ–π–≥—Ä–∞—É–¥ -> https://www.phplayground.com/
*/

/*
–£—Å–ª–æ–≤–∏—è
    –í —Å–∞–¥—É –ø–æ—Å–∞–∂–∞–Ω–æ 10 —è–±–ª–æ–Ω—å –∏ 15 –≥—Ä—É—à; ‚úÖ
    –° –æ–¥–Ω–æ–π —è–±–ª–æ–Ω–∏ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å 40-50 —è–±–ª–æ–∫; ‚úÖ
    –° –æ–¥–Ω–æ–π –≥—Ä—É—à–∏ –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å 0-20 –≥—Ä—É—à; ‚úÖ
    –£ –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –≤ —Å–∞–¥—É –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä. ‚úÖ
–ó–∞–¥–∞—á–∞
    –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è php, –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É: –ø—Ä–æ—Ç–æ—Ç–∏–ø —Å–±–æ—Ä—â–∏–∫–∞ —Ñ—Ä—É–∫—Ç–æ–≤.
    –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å:
        –î–æ–±–∞–≤–ª—è—Ç—å –¥–µ—Ä–µ–≤—å—è –≤ —Å–∞–¥; ‚úÖ
        –°–æ–±–∏—Ä–∞—Ç—å –ø–ª–æ–¥—ã —Å–æ –≤—Å–µ—Ö –¥–µ—Ä–µ–≤—å–µ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Å–∞–¥; ‚úÖ
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–µ—Ä–µ–≤—å–µ–≤. ‚úÖ
        üî• –î–æ–±–∞–≤–∏–ª –æ—Ç —Å–µ–±—è -> –ï—Å–ª–∏ –º—ã —Å–æ–±—Ä–∞–ª–∏ —É—Ä–æ–∂–∞–π —Å –¥–µ—Ä–µ–≤—å–µ–≤, —Ç–æ 2 —Ä–∞–∑ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ —Å–º–æ–∂–µ–º. –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–µ—Ä–µ–≤—å—è ‚úÖ
    *–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: 
        —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π –≤–µ—Å —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ (1 —è–±–ª–æ–∫–æ –≤–µ—Å–∏—Ç 150 - 180 –≥—Ä, 1 –≥—Ä—É—à–∞ 130 - 170 –≥—Ä) ‚úÖ
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. ‚úÖ
    –°–ø–æ—Å–æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ —Å–∞–¥—É - –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ (–º–∞—Å—Å–∏–≤/—Ñ–∞–π–ª/–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö). ‚úÖ
        üîî –î–æ–±–∞–≤–∏–ª –ø—Ä–æ—Å—Ç–æ –∫–æ–¥–æ–º:
            $MainComponent->AddTree(TreeType::Apple,10);
            $MainComponent->AddTree(TreeType::Pear,15);
    –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞:
        –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ main.php –≤ –∫–æ–Ω—Å–æ–ª–∏: 
        –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ä–µ–≤—å—è —Å–∞–¥; ‚úÖ
        –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö –¥–µ—Ä–µ–≤—å–µ–≤; ‚úÖ
        –í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞. ‚úÖ
        üî• –í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –æ–±—â—É—é –º–∞—Å—Å—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ ‚úÖ
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: 
    –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á—É –û–û–ü –ø–æ–¥—Ö–æ–¥–æ–º, –≤—ã–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∑–∞–¥–∞—á–∏ –≤ –∫–ª–∞—Å—Å—ã ‚úÖ
    –ù–∞–ø–∏—Å–∞—Ç—å —é–Ω–∏—Ç —Ç–µ—Å—Ç—ã –Ω–∞ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚úÖ
        üî• –ù–∞–ø–∏—Å–∞–ª 2 —é–Ω–∏—Ç –∫–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å. –ó–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤ UnitTests -> runTest‚úÖ

üî• –ü–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π enum (php >= 8.1)‚úÖ
üî• –ü–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –±–æ–ª—å—à–µ –º–µ—Ç–æ–¥–æ–≤, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–∞–∫–∏–µ –∫–∞–∫ reduce,filter,map (php >= 8.1)‚úÖ
üî• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü: –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è, –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è, –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º ‚úÖ
üî• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∑–∞–º—ã–∫–∞–Ω–∏—è  (use –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–∞ –∏ $this->test1(...) –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ —Ç–µ—Å—Ç–æ–≤) ‚úÖ
*/


/*
  enum TreeType: —Ç–∏–ø—ã –¥–µ—Ä–µ–≤—å–µ–≤, –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å 1 –¥–µ—Ä–µ–≤–∞
  class Tree: –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ä–µ–≤—å–µ–≤
  class AppleTree, PearTree: –∫–ª–∞—Å—Å—ã –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –æ—Ç Tree
  class Garden: –°–∞–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å—Ç—É—Ç –¥–µ—Ä–µ–≤—å—è
  class App
  class UnitTests: —Ç–µ—Å—Ç—ã

  üî• –í—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ - –≤–Ω–∏–∑—É –ø—Ä–æ–≥—Ä–∞–º–º—ã.
*/

/* –¥–æ—Å—Ç—É–ø–Ω–æ —Å 8.1 */
enum TreeType: string
{
    case Apple = '–Ø–±–ª–æ–Ω—è';
    case Pear = '–ì—Ä—É—à–∞';

    /* 
        –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏–∂–µ –≤ –∫–ª–∞—Å—Å 'Tree' –≤ –≤–∏–¥–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç, –Ω–æ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è —Ç–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ –ë–î –∏–ª–∏ –∏–∑ –≤–Ω–µ.
        –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ç—É—Ç –±—É–¥–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥. –¢–∞–∫ —Ö–æ—Ç—è –±—ã –ø–æ–∫–∞–∂—É –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –≤ enum (–∫–∞–∫ –∏ –≤ –æ–±—ã—á–Ω–æ–º –∫–ª–∞—Å—Å–µ).
    */

    public static function GetTreeWeight(TreeType $type): int
    {
        return match($type)
        {
            TreeType::Apple => random_int(150, 180),
            TreeType::Pear => random_int(130,170)
        };
    }

    public static function GetTreeCount(TreeType $type): int
    {
        return match($type)
        {
            TreeType::Apple => random_int(40, 50),
            TreeType::Pear => random_int(0, 20)
        };
    }
}

abstract class Tree
{
    protected string $id;
    protected bool $isCollected;
    protected string $itemName,$name;
    protected TreeType $type;

    public function __construct()
    {
        $this -> isCollected = false;
        $this -> id = uniqid();
    }

    /* 
        –¥–ª—è –≤–µ—Ä—Å–∏–∏ < 8.1 –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å => 
        switch {case: 'Apple' ...; break; case: 'Pear' ... ; break;}
    */
    public final static function CreateTree(TreeType $type): Tree
    {
        return match($type) 
        {
            TreeType::Apple => new AppleTree(),
            TreeType::Pear => new PearTree()  
        };
    }
    
    public function __toString() : string
    {
        return $this -> name;
    }
    public function GetItemName() : string
    {
        return $this -> itemName;
    }
    public function GetTypeOfTree() : string
    {
        return $this -> type->value;
    }

    public function IsCollected() : bool
    {
        return $this -> isCollected;
    }

    protected function Collect()
    {
        $this -> isCollected = true;
    }
    abstract function GetWeight(int $count) : int; //—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø–æ —Å—É—Ç–∏ —ç—Ç–æ –∏–∑–±—ã—Ç–æ—á–Ω—ã–π –∫–æ–¥
    abstract function GetCount() : int; //—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø–æ —Å—É—Ç–∏ —ç—Ç–æ –∏–∑–±—ã—Ç–æ—á–Ω—ã–π –∫–æ–¥
}

/*
    –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 2 –∫–ª–∞—Å—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å (TreeType $type) –≤ –∫–ª–∞—Å—Å–µ Tree. 
    –ù–æ —Å–µ–π—á–∞—Å –¥–æ–ø—É—Å—Ç–∏–º —ç—Ç–∏ –¥–µ—Ä–µ–≤—å—è –±—É–¥—É—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—é –º–µ—Ç–æ–¥–æ–≤ GetWeight –∏ GetCount, –∏ —É –Ω–∏—Ö –±—É–¥–µ—Ç —Ä–∞–∑–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ __construct
*/
final class AppleTree extends Tree
{
    public function __construct()
    {
        parent::__construct();
        $this -> name = '–Ø–±–ª–æ–Ω—è';
        $this -> itemName = '–Ø–±–ª–æ–∫–æ';
        $this -> type = TreeType::Apple; // –ø—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–≥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ...
    }

    public function Collect(): array
    {
        if ($this -> isCollected)
            return [];
        parent::Collect();
        $count = $this->GetCount();
        return ['key' => parent::GetItemName(), 'values' => ['weight' => $this->GetWeight($count), 'count' => $count]];
    }

    function GetWeight(int $count): int
    {
        $allweight = 0;
        for ($i=0; $i < $count; $i++) { 
            $allweight += TreeType::GetTreeWeight(TreeType::Apple);
        }
        return $allweight;
    }

    function GetCount(): int
    {
        return TreeType::GetTreeCount(TreeType::Apple);
    }
}

final class PearTree extends Tree
{
    public function __construct()
    {
        parent::__construct();
        $this -> name = '–ì—Ä—É—à–∫–∞';
        $this -> itemName = '–ì—Ä—É—à–∞';
        $this -> type = TreeType::Pear; // –ø—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–≥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ...
    }

    public function Collect(): array
    {
        if ($this -> isCollected)
            return [];
        parent::Collect();
        $count = $this->GetCount();
        return ['key' => parent::GetItemName(), 'values' => ['weight' => $this->GetWeight($count), 'count' => $count]];
    }

    function GetWeight(int $count): int
    {
        $allweight = 0;
        for ($i=0; $i < $count; $i++) { 
            $allweight += TreeType::GetTreeWeight(TreeType::Pear);
        }
        return $allweight;
    }

    function GetCount(): int
    {
        return TreeType::GetTreeCount(TreeType::Pear);
    }
}

interface iGarden
{
    public function AddTree(TreeType $type, int $count) : void;
    public function BeforeCollect(TreeType $type) : array; //[string data, ?string general_fault]
    function Collect(array $filtertree) : array; //[string data, ?string general_fault]
}

//–î–æ–ø—É—Å—Ç–∏–º —á—Ç–æ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ —Å–∞–¥ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
final class Garden implements iGarden
{
    private array $trees; //child of Tree

    public function __construct()
    {
        $this -> trees = [];
        //echo $this -> trees;
    }
    public function AddTree(TreeType $type = null, int $count = null) : void
    {
        if (!is_null($type) && !is_null($count) && $count > 0)
            for ($i=0; $i < $count; $i++) 
            { 
                $this -> trees[] = Tree::CreateTree($type);
            }
        else 
            throw new Exception('Can\'t add new tree. Check Parameters');

    }
    /*
    * –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–µ—Ä–µ–≤—å—è
    */
    public function BeforeCollect(?TreeType $type = null,int $count = 0) : array
    {
        if (!is_null($type))
        {
            $filterTrees = array_filter($this->trees, function(AppleTree | PearTree $value) use($type) { return (!$value->isCollected()) && ($value->GetTypeOfTree() == $type->value);});
            if ($count > 0)
            {
                if (count($filterTrees) < $count || $count < 0)
                    return ["fault_error" => "–î–µ—Ä–µ–≤—å–µ–≤ '{$type->value}' –º–µ–Ω—å—à–µ —á–µ–º {$count}, –∏–ª–∏ —á–∏—Å–ª–æ –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è —Å–±–æ—Ä–∞ < 0"];
                return $this->Collect(array_slice($filterTrees,0,$count));
            }
            return $this->Collect($filterTrees);
        }
        else 
        {
            $filterTrees = array_filter($this->trees, function(AppleTree | PearTree $value) {return !$value->isCollected();} );
            return $this->Collect($filterTrees);
        }
    }
    /*
    * –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤
    */
    function Collect(array $filterTrees): array
    {
        //–Ω–∞—Ö–æ–¥–∏–º
        if (empty($filterTrees))
            return ["fault_error" => "–ù–µ—Ç –¥–µ—Ä–µ–≤—å–µ–≤ –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è —Å–±–æ—Ä–∞"];

        //—Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å array_map, –Ω–æ —Ç—É—Ç —ç—Ç–æ –±–µ—Å–º—ã—Å–ª–µ–Ω–Ω–æ... –ª—É—á—à–µ —Å—Ä–∞–∑—É —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–ª—é—á–∞–º
        //$filterTrees = array_map(function(AppleTree | PearTree $value) {return $value->Collect();} , $filterTrees

        //–≥—Ä—É–ø–ø–∏—Ä—É–µ–º
        $result = [];
        foreach ($filterTrees as &$filterTrees) 
        {
            //$filterTrees->Collect();
            $tmp = $filterTrees->Collect();
            if ($tmp != null)
              $result[$tmp["key"]][] = $tmp['values'];
        }

        //–≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        $result_string = "–ë—ã–ª–æ —Å–æ–±—Ä–∞–Ω–æ:";
        foreach ($result as $name => $items) 
        {
            $count = array_reduce($items, function($items,array $item){return $items += $item["count"];});
            $weight = array_reduce($items, function($items,array $item){return $items += $item["weight"];});
            $result_string .= "\n{$name}: {$count} —à—Ç, –æ–±—â–∏–º –≤–µ—Å–æ–º {$weight} –≥—Ä";
        }

        return ["data" => $result_string];
    }
}


/*
    –ö–ª–∞—Å—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤.  –ù–µ —Å—Ç–∞–ª —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –±–æ–ª—å—à–æ–π –º–æ–¥—É–ª—å. –í—Å–µ–≥–æ-–ª–∏—à—å 2 –º–µ—Ç–æ–¥–∞ –ø–æ —à–∞–±–ª–æ–Ω—É –ê–ê–ê, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ –∫–ª—é—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ. 
    –ü–æ —Ö–æ—Ä–æ—à–µ–º—É –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –º–Ω–æ–≥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º '–¢–µ—Å—Ç–æ–≤—ã—Ö –¥—É–±–ª–µ–π' –∏ '–∑–∞–≥–ª—É—à–µ–∫'
*/
class UnitTests
{
    //—Ç–µ—Å—Ç—ã
    private $errorsLog = [];
    /*
    * –ë—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∏ —Ç–µ—Å—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
    */
    public function runTest()
    {
        $tests = 
        [
            "test1" => $this->Create_Trees_And_Collect_Production(...),
            "test2" => $this->Create_Trees_And_Collect_Spesific_Production(...),
        ];

        echo ("–ù–∞—á–∏–Ω–∞–µ–º UnitTests\n\n");
        $this->StartTest($tests);

        if (empty($this->errorsLog))
            echo ("\n\n–¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã");
        else 
            foreach ($this->errorsLog as $key => $value) {
                echo ("\n–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {$key}: {$value}\n");
            }
    }


    //—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤.
    private function StartTest($tests)
    {
        foreach ($tests as $name => $test)
        {
            echo("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ {$name}\n");
            try
            {
                $test();
            }
            catch (Exception $e)
            {
                 $this->errorsLog[$name] = $e->getMessage();
            }
            finally
            {
                echo("–¢–µ—Å—Ç {$name} –∑–∞–≤–µ—Ä—à–µ–Ω\n");
            }
        }
    }
    //–∏–∑–æ–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∏–∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.

    /**
     * 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ä–µ–≤—å—è –∏ —Å–æ–±—Ä–∞—Ç—å —Å –Ω–∏—Ö —á—Ç–æ-—Ç–æ
     */
    private function Create_Trees_And_Collect_Production()
    {
        //[GIVEN] –ì–ª–∞–≤–Ω—ã–π —Å–∞–¥
        $TestComponent = new Garden();

        //[GIVEN] –°–∞–∂–∞–µ–º 10 —è–±–ª–æ–Ω—å –∏ 15 –≥—Ä—É—à
        $TestComponent->AddTree(TreeType::Apple,10);
        $TestComponent->AddTree(TreeType::Pear,15);

        //[WHEN] –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ü–∏—é
        $result1 = $TestComponent->BeforeCollect();
        //[WHEN] –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ü–∏—é 2 —Ä–∞–∑
        $result2 = $TestComponent->BeforeCollect();

        //[THEN] –î–æ–ª–∂–Ω—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é
        assert(!array_key_exists('data',$result1) || array_key_exists('fault_error',$result1), 'H–µ —Å–º–æ–≥–ª–∏ —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é');

        //[THEN] –Ω–µ–ª—å–∑—è —Å–æ–±—Ä–∞—Ç—å 2 —Ä–∞–∑ —Å —Ç–µ—Ö –∂–µ –¥–µ—Ä–µ–≤—å–µ–≤
        assert(!array_key_exists('fault_error',$result2) || array_key_exists('data',$result2), '–°–º–æ–≥–ª–∏ —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é 2 —Ä–∞–∑ —Å —Ç–µ—Ö –∂–µ –¥–µ—Ä–µ–≤—å–µ–≤');
    }
    /**
     * 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å 2 —è–±–ª–æ–Ω–∏ –∏ –Ω–µ —Å–º–æ–∂–µ–º —Å–æ–±—Ä–∞—Ç—å 1 –≥—Ä—É—à—É –∏–ª–∏ 3 —è–±–ª–æ–Ω–∏
     */
    private function Create_Trees_And_Collect_Spesific_Production()
    {
        //[GIVEN] –ì–ª–∞–≤–Ω—ã–π —Å–∞–¥
        $TestComponent = new Garden();

        //[GIVEN] –°–∞–∂–∞–µ–º 2 —è–±–ª–æ–Ω–∏
        $TestComponent->AddTree(TreeType::Apple,2);

        //[WHEN] –°–æ–±–∏—Ä–∞–µ–º 1 –≥—Ä—É—à—É
        $result1 = $TestComponent->BeforeCollect(TreeType::Pear,1);
        //[WHEN] –°–æ–±–∏—Ä–∞–µ–º 3 —è–±–ª–æ–∫–∞
        $result2 = $TestComponent->BeforeCollect(TreeType::Apple,3);
        //[WHEN] –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —è–±–ª–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å
        $result3 = $TestComponent->BeforeCollect(TreeType::Apple);

        //[THEN] –Ω–µ—Ç –≥—Ä—É—à–∏
        assert(!array_key_exists('fault_error',$result1) || array_key_exists('data',$result1), '–°–º–æ–≥–ª–∏ —Å–æ–±—Ä–∞—Ç—å –≥—Ä—É—à—É —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤');
        //[THEN] –Ω–µ—Ç 3 —è–±–ª–æ–∫
        assert(!array_key_exists('fault_error',$result2) || array_key_exists('data',$result2), '–°–º–æ–≥–ª–∏ —Å–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ —è–±–ª–æ–∫ —á–µ–º –¥–µ—Ä–µ–≤—å–µ–≤');
        //[THEN] –î–æ–ª–∂–Ω—ã —Å–æ–±—Ä–∞—Ç—å —è–±–ª–æ–∫–∏
        assert(!array_key_exists('data',$result3) || array_key_exists('fault_error',$result3), 'H–µ —Å–º–æ–≥–ª–∏ —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é');
    }
}

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
 */
final class App
{
    /*
        –ì–ª–∞–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —ç—Ç–æ–π –∑–∞–¥–∞—á–∫–∏
    */
    public static function Main()
    {
        $garden = new Garden();

        echo "–î–æ–±–∞–≤–ª—è–µ–º 10 —è–±–ª–æ–Ω—å –∏ 15 –≥—Ä—É—à\n";
        $garden->AddTree(TreeType::Apple,10);
        $garden->AddTree(TreeType::Pear,15);
        echo "–ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é\n";
        self::Show($garden->BeforeCollect());
        echo "–ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é –µ—â–µ —Ä–∞–∑\n";
        self::Show($garden->BeforeCollect());
        echo "–î–æ–±–∞–≤–ª—è–µ–º 5 —è–±–ª–æ–Ω—å\n";
        $garden->AddTree(TreeType::Apple,5);
        echo "–ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å 1 —è–±–ª–æ–Ω—é\n";
        self::Show($garden->BeforeCollect(TreeType::Apple,1));
        echo "–ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å 1 –≥—Ä—É—à—É\n";
        self::Show($garden->BeforeCollect(TreeType::Pear,1));
        echo "–í—Å–µ –≤–µ—Ä–Ω–æ, –º—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ 5 –Ω–æ–≤—ã—Ö —è–±–ª–æ–Ω—å, –∞ –≥—Ä—É—à–∏ –≤—Å–µ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã\n";
        echo "1 —è–±–ª–æ–Ω—é –º—ã —Å–æ–±—Ä–∞–ª–∏ –∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å 4. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å\n";
        self::Show($garden->BeforeCollect());

        echo("\n\n\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏–º UnitTests \n\n");
    }
    /*
        –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    */
    public static function Show($arrayFromCollect)
    {
        if (array_key_exists('fault_error',$arrayFromCollect))
            echo "RESULT: " . $arrayFromCollect["fault_error"] . "\n\n";
        else 
            echo "RESULT: " . $arrayFromCollect["data"] . "\n\n";
    }
}


//–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
App::Main();

//–¢–µ—Å—Ç—ã
$UnitTests = new UnitTests();
$UnitTests->runtest();
unset($UnitTests);
